import asyncio
import json
import html
import re
from datetime import datetime

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from scheduler import schedule, reschedule_all

BOT_TOKEN = "8035901285:AAGwQ0X2jPuC6sqt6utDzhPEei-ARAWePw8"

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
giveaways_file = "storage.json"

class GiveawayForm(StatesGroup):
    waiting_for_forwarded_message = State()
    waiting_for_end_time = State()

def load_giveaways():
    try:
        with open(giveaways_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_giveaways(data):
    with open(giveaways_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

menu_buttons = InlineKeyboardBuilder()
menu_buttons.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="add")
menu_buttons.button(text="üìã –°–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π", callback_data="list")
menu_buttons.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="delete")
menu_buttons.adjust(1)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=menu_buttons.as_markup()
    )

@dp.callback_query(F.data == "add")
async def inline_add(query: CallbackQuery, state: FSMContext):
    await query.answer()
    await state.set_state(GiveawayForm.waiting_for_forwarded_message)
    await query.message.edit_text("üëâ –ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞).")

@dp.message(GiveawayForm.waiting_for_forwarded_message)
async def process_forwarded_message(message: Message, state: FSMContext):
    if not message.forward_from and not message.forward_from_chat:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º, –∞ –Ω–µ –ø–∏—à–∏ –µ–≥–æ —Å–∞–º.")
        return

    text = message.text or message.caption or ""
    if not text:
        await message.answer("‚ùå –í –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    channels = re.findall(r'@[\w_]+', text)
    channels = list(set(channels))

    if not channels:
        await message.answer("‚ùóÔ∏è –í —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (@username).\n"
                             "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏—Ö –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ /edit.")

    await state.update_data(text=text.strip(), channels=channels)

    await state.set_state(GiveawayForm.waiting_for_end_time)
    await message.answer("‚è∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")

@dp.message(GiveawayForm.waiting_for_end_time)
async def process_end_time(message: Message, state: FSMContext):
    try:
        dt = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
        return

    data = await state.get_data()
    giveaway = {
        "user_id": message.from_user.id,
        "text": data["text"],
        "channels": data["channels"],
        "main_channel": data["channels"][0] if data["channels"] else "",
        "end_time": dt.strftime("%Y-%m-%d %H:%M:%S")
    }

    giveaways = load_giveaways()
    giveaways.append(giveaway)
    save_giveaways(giveaways)
    await schedule(bot, giveaway)

    await message.answer("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!", reply_markup=menu_buttons.as_markup())
    await state.clear()

@dp.callback_query(F.data == "list")
async def inline_list(query: CallbackQuery):
    await query.answer()
    data = load_giveaways()
    user_giveaways = [g for g in data if g["user_id"] == query.from_user.id]
    if not user_giveaways:
        await query.message.edit_text("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.", reply_markup=menu_buttons.as_markup())
        return

    text = ""
    for idx, g in enumerate(user_giveaways):
        dt = datetime.strptime(g["end_time"], "%Y-%m-%d %H:%M:%S")
        safe_text = html.escape(g['text'][:50])
        text += (
            f"<b>ID:</b> {idx}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{safe_text}\n"
            f"<b>–î–∞—Ç–∞:</b> –î–æ: {dt.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–ö–∞–Ω–∞–ª—ã:</b> {', '.join(g['channels'])}\n\n"
        )

    await query.message.edit_text(text, reply_markup=menu_buttons.as_markup())

@dp.callback_query(F.data == "delete")
async def inline_delete(query: CallbackQuery):
    await query.answer()
    data = load_giveaways()
    user_giveaways = [g for g in data if g["user_id"] == query.from_user.id]
    if not user_giveaways:
        await query.message.edit_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.", reply_markup=menu_buttons.as_markup())
        return

    kb = InlineKeyboardBuilder()
    text = "<b>–í—ã–±–µ—Ä–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    for idx, g in enumerate(user_giveaways):
        dt = datetime.strptime(g["end_time"], "%Y-%m-%d %H:%M:%S")
        text += f"üéÅ <b>#{idx}</b> ‚Äî –¥–æ {dt.strftime('%d.%m.%Y %H:%M')}\n"
        kb.button(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å #{idx}", callback_data=f"del_{idx}")
    kb.button(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_menu")
    kb.adjust(1)

    await query.message.edit_text(text, reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("del_"))
async def confirm_deletion(query: CallbackQuery):
    idx = int(query.data.split("_")[1])
    data = load_giveaways()
    user_id = query.from_user.id
    user_giveaways = [g for g in data if g["user_id"] == user_id]

    if idx >= len(user_giveaways):
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
        return

    to_delete = user_giveaways[idx]
    data.remove(to_delete)
    save_giveaways(data)
    await query.answer("üóë –£–¥–∞–ª–µ–Ω–æ!")
    await inline_delete(query)

@dp.callback_query(F.data == "back_menu")
async def back_to_menu(query: CallbackQuery):
    await query.answer()
    await query.message.edit_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=menu_buttons.as_markup()
    )

async def main():
    await reschedule_all(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())